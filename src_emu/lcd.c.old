#include "emu.h"

uint32_t dmg_palette[] = {0xffffffff, 0xffaaaaaa, 0xff555555, 0xff000000};
uint8_t gbc_backgr_palettes[8*4*2]; // 8 palettes of 4 colors of 2 bytes.
uint8_t gbc_sprite_palettes[8*4*2];

void lcd_clear() {
	for (int i=0; i<160*144; i++)
		screen_pixels[i] = dmg_palette[0];
}

void lcd_draw_current_row() {
	// Draw BG & Window
	int BGTileMap  = (mem[0xff40]&0x08) ? 0x9c00 : 0x9800;
	int WinTileMap = (mem[0xff40]&0x40) ? 0x9c00 : 0x9800;
	int tileData   = (mem[0xff40]&0x10) ? 0x8000 : 0x8800;
	bool isWindowDisplayEnabled = mem[0xff40]&0x20;
	bool isBGDisplayEnabled = mem[0xff40]&0x01;
	for (int screenX=0; screenX<160; screenX++) {
		int WY=mem[0xff4a], WX=mem[0xff4b]-7;
		int SCY=mem[0xff42], SCX=mem[0xff43];
		int tileMap;
		int x, y;
		if (isWindowDisplayEnabled && WY<=LY && WX<=screenX) {
			x = (screenX-WX)&0xff;
			y = (LY-WY)&0xff;
			tileMap = WinTileMap;
		} else if (isBGDisplayEnabled) {
			x = (screenX+SCX)&0xff;
			y = (LY+SCY)&0xff;
			tileMap = BGTileMap;
		} else {
			break;
		}
		int tileX = x>>3;
		int tileY = y>>3;
		int u = x&7;
		int v = y&7;
		uint8_t attributes = vram[0x3800]; // In Bank 1
		if (hardwareMode == MODE_GBC && (attributes & 0x8))
			tileData += 0x2000; // Tile in Bank 1
		int tileIndex = readByte(tileMap + tileY*32 + tileX);
		if (!(mem[0xff40]&0x10))
			tileIndex = (int8_t)tileIndex + 128;
		int tile = tileData + tileIndex*16;
		uint16_t pixels = readWord(tile + v*2);
		uint32_t px = pixels >> (7-u);
		px = (px>>7&2) | (px&1);
		if (hardwareMode == MODE_DMG){
			px = dmg_palette[(mem[0xff47]>>(px*2))&3];
		} else {
			px = ((uint16_t*)gbc_backgr_palettes)[px+4*(attributes&7)];
			px = (px>>8)|((px&0xff)<<8);
			int r = ((px >> 0 ) & 0x1f) * 256/32;
			int g = ((px >> 5 ) & 0x1f) * 256/32;
			int b = ((px >> 10) & 0x1f) * 256/32;
			px = (r << 24) | (g << 16) | (b << 8);
			px = (b << 24) | (g << 16) | (r << 8);
			// px >>= 8;
		}
		screen_pixels[LY*160 + screenX] = px;
	}

	// Draw Sprites
	uint8_t *spriteAttrTable = mem+0xfe00;
	int spriteData = 0x8000;
	bool isSpriteDisplayEnabled = mem[0xff40]&0x02;
	for (int i=0; i<40; i++) {
		if (!isSpriteDisplayEnabled)
			break;
		uint8_t *sprite = spriteAttrTable + i*4;
		int spriteY = (int)sprite[0] - 16;
		int v = LY - spriteY;
		if (v < 0 || v > 7)
			continue;
		bool flipX = sprite[3]&0x20;
		bool flipY = sprite[3]&0x40;
		int spriteX = (int)sprite[1] - 8;
		int tile = spriteData + sprite[2]*16;
		if (hardwareMode == MODE_GBC && (sprite[3]&8))
			tileData += 0x2000; // Tile in Bank 1
		uint16_t pixels = readWord(tile + 2*(flipY ? (7-v) : v));
		uint8_t spritePalette = mem[(sprite[3]&10) ? 0xff49 : 0xff48];
		for (int screenX=max(0, spriteX); screenX<min(160, spriteX+8); screenX++) {
			int u = screenX - spriteX;
			uint32_t px = pixels >> (flipX ? u : (7-u));
			px = (px>>7&2) | (px&1);
			if (!px) // transparent
				continue;
			if (hardwareMode == MODE_DMG){
				px = dmg_palette[(spritePalette>>(px*2))&3];
			} else {
				px = ((uint16_t*)gbc_backgr_palettes)[px+4*(sprite[3]&7)];
				// px = (px>>8)|((px&0xff)<<8);
				int r = ((px >> 0 ) & 0x1f) * 256/32;
				int g = ((px >> 5 ) & 0x1f) * 256/32;
				int b = ((px >> 10) & 0x1f) * 256/32;
				px = (b << 24) | (g << 16) | (r << 8);
				px = (r << 24) | (g << 16) | (b << 8);
				// px >>= 8;
			}
			screen_pixels[LY*160 + screenX] = px;
		}
	}
}